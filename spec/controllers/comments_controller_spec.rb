require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CommentsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.

  let(:invalid_attributes) {
    {
      name: "",
      body: ""
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CommentsController. Be sure to keep this updated too.

  let(:valid_session) {}

  let(:folder) { create(:folder) }
  let(:content) { create(:content, folder_id: folder.id) }
  let(:comment) { create(:comment, content_id: content.id) }

  describe "GET #index" do
    it "assigns all comments as @comments" do
      get :index, { folder_token: folder.token, content_id: content.id }, valid_session
      expect(assigns(:comments)).to eq([comment])
    end
  end

  describe "GET #show" do
    it "assigns the requested comment as @comment" do
      get :show, { folder_token: folder.token, content_id: content.id, id: comment.to_param}, valid_session
      expect(assigns(:comment)).to eq(comment)
    end
  end

  describe "GET #new" do
    it "assigns a new comment as @comment" do
      get :new, { folder_token: folder.token, content_id: content.id }, valid_session
      expect(assigns(:comment)).to be_a_new(Comment)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      let(:valid_attributes) { { name: "Paul", body: "Hello World!" } }
      it "creates a new Comment" do
        expect {
          post :create, { folder_token: folder.token, content_id: content.id, comment: valid_attributes }, valid_session
        }.to change(Comment, :count).by(1)
      end

      it "assigns a newly created comment as @comment" do
        post :create, { folder_token: folder.token, content_id: content.id, comment: valid_attributes }, valid_session
        expect(assigns(:comment)).to be_a(Comment)
        expect(assigns(:comment)).to be_persisted
      end

      it "redirects to comments" do
        post :create, { folder_token: folder.token, content_id: content.id, comment: valid_attributes }, valid_session
        expect(response).to redirect_to(folder_content_comments_path)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved comment as @comment" do
        post :create, { folder_token: folder.token, content_id: content.id, comment: invalid_attributes }, valid_session
        expect(assigns(:comment)).to be_a_new(Comment)
      end

      it "re-renders the 'new' template" do
        post :create, { folder_token: folder.token, content_id: content.id, comment: invalid_attributes }, valid_session
        expect(response).to render_template("new")
      end
    end
  end
end
